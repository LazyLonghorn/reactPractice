[Redux 라이브러리 이해하기]


가장 많이 사용되는 상태관리 라이브러리.
가장 큰 장점은 컴포넌트의 상태 관리 로직을 별도의 파일로 분리할 수 있다는 점.
(때문에, 컴포넌트 간 같은 상태로 공유도 보다 수월하다.)


리덕스로도 전역 상태관리가 수월하다. (Context API 처럼)
프로젝트 규모가 클 수록 리덕스로 상태 관리하는 것이 보다 체계적으로 관리 할 수 있다.


□ 기본용어
# Action 
   - 상태 변화를 위해 발생시킴
     반드시, 'type' 필드를 가지고 있어야함 (Name 역할)
     { type: 'INSERT', data: {text: 'aa'} }

# Action Creator
   - Action 객체를 생성하는 함수
     addTodo = () => { return { type: 'INSERT', data: {text: 'aa'} }}

# reducer
   - 변화를 발생시키는 함수
     action 이 발생되면, 리듀서가 현재 상태와 전달받은 액션 객체를 받아오고
     이를 통해, 새로운 상태를 만들어 반환

    function reducer(state=initalState, action) {
        switch(action.type) {
            return {
                number: state.number + 1
            }
        }
    }

# store
   - 프로젝트에 리덕스를 적용하기 위한 스토어
     한 프로젝트에 하나의 스토어만 가능.

# dispatch
   - store 의 내장함수로 액션을 발생시킴.
     호출되면, 스토어가 리듀서를 실행하고 새로운 상태로 만듬.

    dispatch(action)

# subscribe
   - 스토어 내장함수로, 함수 안에 리스너 함수를 파라미터로 넣어서 호출
     dispatch 를 통해 상태가 업데이트 될 때마다, 리스너 함수가 호출됨.

    store.subscribe(() => { console.log('Hello Update') });



reducer 함수에서 상태 관리를 할 때는 불변성으로 유지해주는 것이 중요하다.
... 를 사용하자
하지만, 상태의 Depth 가 깊어지면 복잡하기 때문에 최대한 단순하게 가져가는 것이 좋다.
(복잡하면 immer 를 사용해야 한다.)

Redux 에서 불변성을 지켜야 하는 이유는 내부적으로 데이터의 변경점을 감지하기 위해 얕은 비교를 통해 진행한다.
따라서, 새로운 객체로 반드시 반환해주어야 한다. (얕은 비교이기 때문에 성능이 좋다.)



Reducer 4 규칙
 # 이전 상태와 액션 객체를 파라미터로 받는다.
 # 파라미터외 의존 하면 안됨.
 # 이전 상태를 건들지 않고, 새로운 객체를 반환
 # 똑같은 파라미터의 경우, 같은 결과를 반환 (랜덤, 날짜 등 안됨)


 













