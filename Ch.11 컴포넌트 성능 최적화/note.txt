[컴포넌트 성능 최적화]


만약, Todo List 가 많은 경우, 동작하는데 성능이 느릴 수 있다.
아래와 같은 이유로 인해 리렌더링이 발생할 수 있다.

1. 자신이 전달 받은 props 가 변경될 때
2. 자신의 state 가 변경될 때
3. 부모가 리렌더링 될 때
4. forceUpdate 가 실행될 때


만약, 항목 1 의 Check가 되면 App 의 state 가 변경되고
따라서 App 이 리렌더링이 발생하면서 하위 모든 컴포넌트가 리렌더링이 발생하게 된다.
(해당 항목만 리렌더링이 발생하도록 개선할 필요가 있다.)




클래스형 컴포넌트의 경우, 라이프사이클의 shouldComponentUpdate 를 사용하면 되지만,
함수형에서는 라이프사이클을 지원하지 않기 때문에 React.memo 를 활용하자

React.memo() 함수로 감싸주면 해당 컴포넌트 함수는 props 값이 변경되지 않는 한 다시 호출되지 않는다.



또한, 현재 onRemove, onToggle 가 todos 변경될 때마다 함수가 새로 생성된다.
이를 방지하기 위한 방법으로는 2 가지가 있다.

1. useState 의 함수형 업데이트 기능
2. useReducer




1. 함수형 업데이트

useState 에 새로운 상태 값이 아닌, 상태 업데이트를 어떻게 수행할 지 정의하는 업데이트를 함수를 전달하는 방식이다.

ex)
const [number, setNumber] = useState(0);
const onIncrease = useCallback(() => setNumber(prev => prev + 1), []);

이 방법을 사용하면, useCallback 에 두 번째 파라미터로 종속된 항목을 넣지 않아도 된다.


2. useReducer

ex)
const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);
dispatch({ type: 'REMOVE', id });




리액트에서 컴포넌트의 상태를 업데이트할 때, 중요한 점은 불변성을 지키는 것이다.
불변성을 지키는 것은 기존 객체에 수정하는 것이 아닌, 새로운 객체를 만들어서 사용하는 것이다.

React.memo 를 사용하면, props 가 변경된 여부를 통해 컴포넌트를 호출(최적화) 하기 때문에 새로운 객체를 사용해야 변경여부를 인지할 수 있다.
따라서, 얕은 복사를 주의해야 한다.

ex)
const list = [{id: 1, value: 30}, {id: 2, value: 60}]




react-virtualized 렌더링 최적화

만약, 2,500 개가 초기 데이터로 가져오는 경우,
초기 화면에 나타나는 것은 9 개이지만, 스크롤 전임에도 전체가 렌더링이 발생하게 되는 현상이 나타난다.


react-virtualized 는 스크롤 되기 전에는 렌더링하지 않고, 크기만 차지하도록 하고 스크롤 동작을 통해 해당 위치에 오면 렌더링하는 방식이다.

 # yarn add react-virtualized

















