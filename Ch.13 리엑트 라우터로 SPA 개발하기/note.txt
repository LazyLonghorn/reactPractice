[리액트 라우터로 SPA 개발하기]


SPA 는 단 하나의 페이지로 구성된 Application 을 의미

기존에는 페이지 이동이나 로딩할 때마다, html 과 서버에서 리소스를 받아와 해석해 렌더링하는 등의 과정을 거쳤다.
하지만, 화면 이동이 많거나, 모던 웹 애플리케이션의 경우 이런 과정에 속도가 느리거나 과부하가 발생할 수 있다.

따라서, 요즘에는 필요한 부분만 자바스크립트에서 변환해주는 방식을 사용한다.


이 때, 한 화면이 아닌 동작에 따라 다른 주소의 다른 화면을 보여주는 과정을 "라우팅" 이라고 한다.
리액트는 라우터를 내장하지 않고 있고, 외부 라이브러리(react-router, Next.js) 을 사용한다.




■ SPA 단점
# App 규모가 커지면, JS 파일이 커진다.
모든 페이지 스크립트를 가지고 와야하기 때문에 ( 이는 코드 스플리팅(Code splitting) 으로 해결할 수 있다. )
 ※ 코드 스플리팅(Code splitting) : 라우트별로 파일을 분리하는 방법

# JS 를 실행할 때까지, 페이지가 비어 있을 수 있다. (JS 파일이 로딩되는 동안, 흰 페이지가 나타날 수 있다.)
이는 서버 사이드 렌더링을 통해 해결가능하다.



yarn add react-router-dom


react-router-dom 을 적용하기 위해서는 우선, index.js 부분의 <App> 컴포넌트를
<BrowserRouter> 로 감싸주면 된다.

<BrowserRouter>
    <App />
</BrowserRouter>



router 로 컴포넌트 연결하기

책에서 나오는 나오는 버전은 v5 로 현재 v6 버전에서와 다르다.
(v5) <Route path='/' component={Home}/>
(v6) <Route path='/' element={<Home/>}/>

또한, 책에서는 Route 를 통해서만 구성이 가능했지만, 현재에서는 <Routes> 태그로 감싸놓아야만 한다.

※ v6 으로 올라가면서 변경된 사항들
https://velog.io/@soryeongk/ReactRouterDomV6



<Link> 컴포넌트를 활용해, 다른 Path 로 이동할 수 있다.
ex> <Link to="/about">About</Link>



v6 으로 올라가면서, 하나의 router 로 다중의 path 를 지원하는 기능은 더 이상 제공되지 않는다.

https://stackoverflow.com/questions/40541994/multiple-path-names-for-a-same-component-in-react-router



페이지 이동 시, 값을 전달하는 방법으로는 파라미터와 쿼리 방식으로 가능하다.
 # 파라미터 : /about/param
 # 쿼리 : /about?query=true


(1) Parameter

파라미터의 경우, 아래와 같이 전달하는 방식은 동일하다.

<Link to="/profile/jon">Jon Profile</Link>
<Route path='/profile/:username' element={<Profile/>}/>

하지만, 해당 컴포넌트에서 전달받은 값을 가져오는 부분은 v6 에서는 다르다.

책(v5) 의 경우, props 의 match 를 통해 가지고 오는 방식

[v5]
 const Profile = ({ match }) => {
    const { username } = match.params;
 }

하지만, v6 에서는 useParams() 함수를 통해서 가지고 오는 방식을 제공한다.

[v6]
const Profile = () => {
    const { username } = useParams();
}

※ username 이름은 <Route> 에서 전달하는 이름 그대로

※ 참고
https://v5.reactrouter.com/web/example/url-params


(2) query

query 의 경우, location 객체에 search 속성값을 활용한다.
해당 객체는 props 로 전달되는데, 여기에는 아래와 같은 값을 가지고 있다.

{
    'pathname': '/about',
    'search': '?query=true',
    'hash': ''
}

<Link to="/about?detail=true">Detail Page</Link>

하지만, 책과 달리 v6 에서는 useLocation() 함수를 통해서 가지고 오는 방식을 제공한다.

[v5]
const About = ({ location }) => {
    const { search } = location;
}

[v6]
const About = () => {
    const loc = useLocation();
}


또한, search 값이 문자열이므로 객체로 변환하는 방법으로 책에서는 qs 라이브러리를 언급하지만,
공식 사이트에서는 URLSearchParams 방식을 샘플로 제공하고 있다.

https://v5.reactrouter.com/web/example/query-parameters


[v5]
const qeury = qs.parse(loc.search, {
    ignoreQueryPrefix: true     // ? 를 생략
});

[v6]
const { search } = useLocation();
React.useMemo(() => new URLSearchParams(search), [search]);
console.log(query.get('detail'));



서브 라우터의 경우, 우선 v6 에서는 exact 속성이 사라졌다.
만약 하위경로에 여러 라우팅을 매칭시키고 싶다면 다음과 같이 URL 뒤에 * 을 사용하여 일치시킬 수 있다.

또한, Route 컴포넌트 하위로 파라미터에 맞는 컴포넌트를 매칭하면 된다.

[App.js]
<Routes>
    <Route path='/' element={<Home/>}/>
    <Route path='/about' element={<About/>}/>
    <Route path='/profiles/*' element={<Profiles/>}/>
</Routes>


[Profiles.js]
<Link to='profile/jon'>Jon</Link>

<Routes>
    <Route path='/profile/*' element={<Profile/>}>
        <Route path=":username" element={<Profile />}/>
    </Route>
</Routes>


https://ui.dev/react-router-nested-routes
https://www.daleseo.com/react-router-nested/


react-router 에서는 history 기능을 제공하는데, 
이는 특정 행동에서 뒤로가거나 다른 페이지로의 이탈을 방지하는 등의 기능을 제공할 수 있다.

v5 의 경우, props.history 방식을 사용하거나 useHistory() 함수를 통해 사용했지만,
v6 의 경우는 useNavigate() 함수를 통한 Navigate 객체를 사용한다.

nav(-1);        // 뒤로가기
nav('/');       // Home


또한, unblock 의 경우, 동작하지 않으며 아래 샘플과 같이 적용해야 한다.

https://blog.woolta.com/categories/1/posts/211
https://kyung-a.tistory.com/36



※ Switch 는 Routes 로 명칭이 변경되었다.


NavLink 를 통해 Active 된 링크에 스타일이나 CSS 를 적용할 수도 있다.
하지만, v6 들어서면서, activeStyle 속성이 사라지고, isActive 등에 대한 현재 상태 값을 통해서
구분할 수 있다.



※ 책의 경우, v5 이고, 최신은 v6 이다.
   버전이 올라가면서 변경된 점이 많으므로, 주의해야 한다.

   

